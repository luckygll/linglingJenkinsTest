#######################################
#
#
# (C) Copyright IBM Corporation 2000
# Unpublished Work
# All Rights Reserved
# Licensed Material - Property of IBM Corporation.
#
# Tivoli Software Distribution
#
#    Author: Michele Crudele - Massimiliano Celli
#
#    Description:  This file contains the stanzas descriptions for all the
#                       objects and actions manageable by
#                       Tivoli Software Distribution.
#
#
#######################################

#######################################
#######################################
##
##  WARNING WARNING WARNING WARNING WARNING
##
##  If you need to modify this file you should follow some rules:
##
##  1 - you can only modify the default values of the attributes
##  2 - boolean values can be only 'y' or 'n'
##  3 - default value for single_choice attributes MUST be specified
##       after the 'choice' field definition.
##  4 - the default value for single_choice attributes MUST be
##       one of the numeric values associated to the possible
##       choices enumerated into the 'choice' field
##  5 - the default value for multi_choice attributes MUST be
##       the sum of one or more values associated to the possible
##       choices enumerated into the 'choice' field
##  6 - default value for numeric attributes MUST be numbers
##
##
#######################################
#######################################

## versions
#
# The valid SPD versions are the following colon-separated ones
# NB: the latest version must be put in first position
#
versions = "4.2.3:4.2.2:4.2.1:4.2:4.1:4.0"

## signature
signature = "TIVOLI Software Package v*** - SPDF"


##-----------------------------------------------------
#
# General  Stanzas
#
#------------------------------------------------------

## log_object_list
log_object_list {
  location {
    type = pathname
    mandatory = y
    default = "$(product_dir)/logs"
  }
  unix_user_id {
    type = numeric
  }
  unix_group_id {
    type = numeric
  }
  unix_attributes {
    type = character_mask
    mask = rwxsl,rwxs,rwx
  }
}
## cm_command
cm_command {
  context = any

  caption {
    type = string
  }
  condition {
    type = string
  }
  is_per_user {
    type = boolean
    default = n
  }
}
## cm_composite_command
cm_composite_command {
  context = package,cm_composite_command
  inherits = cm_command

  stop_on_failure {
    type = boolean
    default = y
  }
}
## generic_container
generic_container {
  context = package,generic_container,cm_composite_command
  builder = make_CmGenericContainer
  inherits = cm_composite_command
  # This "name" is a valid attribute only for 4.0 and 4.1 SWD releases
  # We leave it here just for backward compatibility
  # In 4.2 we can use the attribute "caption" inherited by cm_command
  name {
    type = string
  }
}

## contained_signature
contained_signature {
  context = package
  builder = make_CmContainedSignature
  inherits = cm_command
  file_name {
    type = string
  }
  file_size {
    type = numeric
  }
  add_if_non_existing {
    type = boolean
    default = n
  }
  inventory_description {
    type = string
  }
  inventory_version {
    type = string
  }
}
## cm_add_object
cm_add_object {
  inherits = cm_command
  replace_if_existing {
    type = boolean
    default = y
  }
  replace_if_newer {
    type = boolean
    default = n
  }
  remove_if_modified {
    type = boolean
    default = n
  }
  is_shared {
    type = boolean
    default = n
  }
  shared_counter {
    type = numeric
    default = 1
  }
}
## cm_remove_object
cm_remove_object {
  inherits = cm_command
}

## packge
package {
  builder = make_CmPackage
  context = root
  inherits = cm_command,cm_composite_command

  nested_software_package {
    type = object
    object_builder = make_NestedPackageList
  }
  copyright {
    type = string
  }
  description {
    type = string
  }
  name {
    type = string
    mandatory = y
  }
  title {
    type = string
  }
  version {
    type = string
    mandatory = y
  }
  undoable {
    type = single_choice
    choice = n:1,o:2,y:4
      default = 2
  }
  committable {
    type = single_choice
    choice = n:1,o:2,y:4
      default = 2
  }
  history_reset {
    type = boolean
    default = n
  }
  after_as_uid {
    type = numeric
    default = 0
  }
  after_input_path {
    type = pathname
  }
  after_prog_env {
    type = string
  }
  after_program_path{
    type = pathname
  }
  before_as_uid {
    type = numeric
    default = 0
  }
  before_input_path{
    type = pathname
  }
  before_prog_env{
    type = string
  }
  before_program_path{
    type = pathname
  }
  default_operation {
    type = single_choice
    choice = install,remove,accept,undo,commit
  }
  lenient_distribution {
    type = boolean
    default = n
  }
  log_gid {
    type = numeric
    default = -1
  }
  log_mode {
    type = numeric
    default = -1
  }
  log_user_id {
    type = numeric
    default = -1
  }
  log_path {
    type = string
  }
  log_host_name {
    type = string
  }
  mail_id{
    type = string
  }
  move_removing_host {
    type = boolean
    default = y
  }
  no_check_source_host {
    type = boolean
    default = y
  }
  no_chk_on_rm {
    type = boolean
    default = y
  }
  operation_mode {
    type = multi_choice
    choice = not_transactional:1,preferably_not_transactional:2,transactional:4,auto_commit:8,undoable:16,preferably_undoable:32,auto_accept:64,undo_ability_transactional:128,prefer_not_reboot:256,during_reboot:512,auto_reboot:1024,preview_only:2048,force:4096,install_any:8192,install_src:16384,binary_file:32768,repair_from_spb:65536,enable_dependency:131072,delta:262144,no_reboot:524288
    default = 1
  }
  post_notice {
    type = boolean
    default = n
  }
  save_default_variables {
    type = boolean
    default = n
  }
  server_mode {
    type = multi_choice
    choice = all:1,src:2,repair:4,check:16,force:32,ignore:64,preview:128
  }
  skip_non_zero {
    type = boolean
    default = n
  }
  source_host_name{
    type = string
  }
  spb_path{
    type = string
  }
  stage_area{
    type = string
  }
  web_view_mode {
    type = single_choice
    choice = public:4,subscriber:2,hidden:1
    default = 1
  }
  creation_time {
    type = string
  }
  last_modification_time {
    type = string
  }
  default_variables {
    type = object
    object_builder = make_VariableList
  }
  log_object_list {
    type = object
    object_builder = make_LogObjectList
  }
  versioning_type {
    type = single_choice
    choice = none:0,swd:1
    default = 1
  }
  package_type {
    type = single_choice
    choice = refresh:0,patch:1
    default = 0
  }
  dependency {
    type = string
  }

  sharing_control {
    type = single_choice
    choice = auto:4,only_shared:2,none:1
    default = 1
  }
  lcf_before_program_path {
    type = pathname
  }
  lcf_before_program_arguments {
    type = string
  }
  lcf_before_program_timeout {
    type = numeric
    default = -1
  }
  lcf_after_program_path {
    type = pathname
  }
  lcf_after_program_arguments {
    type = string
  }
  lcf_after_program_timeout {
    type = numeric
    default = -1
  }

}

## nested_software_package
nested_software_package {
  name {
    type = string
  }
  version {
    type = string
  }
}

#############################################################
##
## OBJECTS
##
#############################################################

##-----------------------------------------------------
#
# File System Objects
#
#------------------------------------------------------

## file_system_object

file_system_object {
  remove_extraneous {
    type = boolean
    default = n
  }
  substitute_variables {
    type = boolean
    default = n
  }
  compute_crc {
    type = boolean
    default = n
  }
  verify_crc {
    type = boolean
    default = n
  }
  fat_attributes {
    type = character_mask
    mask = rahs
  }
  netware_attributes {
    type = character_mask
    mask = xbtpndchsra
  }
  ntfs_attributes {
    type = character_mask
    mask = rahsc
  }
  unix_attributes {
    type = character_mask
    mask = rwxsl,rwxs,rwx
  }
  unix_owner {
    type = string
  }
  unix_group {
    type = string
  }
  unix_group_id {
    type = numeric
  }
  unix_user_id {
    type = numeric
  }
  create_dirs {
    type = boolean
    default = y
  }
  preserve_unix {
    type = boolean
    default = n
  }
  remove_empty_dirs {
    type = boolean
    default = y
  }
  remote {
    type = boolean
    default = n
  }
  compression_method {
    type = single_choice
    choice = deflated:8,stored:0
    default = 0
  }
  temporary {
    type = boolean
    default = n
  }
  rename_if_locked {
    type = boolean
    default = n
  }
  delta_compressible {
    type = single_choice
    choice = y:1,d:0,n:-1
    default = 0
  }
  #
  # delta_compressable
  # manteined only for 4.1 compatibility
  # because it has been changed in 'delta_compressible'
  #
  delta_compressable {
    type = single_choice
    choice = y:1,d:0,n:-1
    default = 0
  }
  is_signature {
    type = single_choice
    choice = y:1,d:0,n:-1
    default = -1
  }
  inventory_description {
    type = string
  }
  inventory_version {
    type = string
  }
}

## add_directory

add_directory {
  builder = make_CmAddFSObjectsContainer
  context = package,generic_container,add_directory,corequisite_files
  inherits = cm_composite_command,cm_add_object,generic_container,file_system_object

  add {
    type = boolean
    default = y
  }
  location {
    type = pathname
  }
  name {
    type = pathname
  }
  destination {
    type = pathname
  }
  descend_dirs {
    type = boolean
    default = n
  }
  translate {
    type = boolean
    default = n
  }
}

## remove_directory

remove_directory {
  builder = make_CmRemoveFSObjectsContainer
  context = package,generic_container,remove_directory
  inherits = cm_composite_command,generic_container,cm_remove_object,file_system_object

  remove {
    type = boolean
    default = y
  }
  descend_dirs {
    type = boolean
    default = n
  }
  destination {
    type = pathname
    mandatory = y
  }
}

## add_file

add_file {
  builder = make_CmAddFile
  context = add_directory,corequisite_files
  inherits = cm_add_object,file_system_object

  name {
    type = pathname
  }
  destination {
    type = pathname
  }
  translate {
    type = boolean
    default = n
  }
}

## remove_file

remove_file {
  builder = make_CmRemoveFile
  context = remove_directory
  inherits = cm_command,file_system_object

  destination {
    type = pathname
    mandatory = y
  }
}

## add_link

add_link {
  builder = make_CmAddLink
  context = add_directory
  inherits = cm_command,cm_add_object

  source_file {
    type = pathname
  }
  follow_links {
    type = boolean
    default = y
  }
  hard_link {
    type = boolean
    default = n
  }
  destination {
    type = pathname
  }
  translate {
    type = boolean
    default = n
  }
}

## remove_link

remove_link {
  builder = make_CmRemoveLink
  context = remove_directory
  inherits = cm_command

  destination {
    type = pathname
  }
  source_file {
    type = pathname
  }
  follow_links {
    type = boolean
    default = n
  }
  hard_link {
    type = boolean
    default = n
  }

}

##-----------------------------------------------------
#
# Windows Profile Objects
#
#------------------------------------------------------

## add_win_profile_objects

add_win_profile_objects {
  builder = make_CmAddWinProfileObjectsContainer
  context = package,generic_container
  inherits = cm_command,cm_composite_command,cm_add_object

  # This "name" is a valid attribute only for 4.0 and 4.1 SWD releases
  # We leave it here just for backward compatibility
  # In 4.2 we can use the attribute "caption" inherited by cm_command
  name {
    type = string
  }
  file {
    type = pathname
    mandatory = y
  }
}

## add_section

add_section {
  context = add_win_profile_objects
  builder =  make_CmAddWinProfileObjectsContainer
  inherits = cm_command,cm_add_object,cm_composite_command

  add {
    type = boolean
    default = y
  }
  name {
    type = string
    mandatory = y
  }
}

## add_item

add_item {
  context = add_section
  builder = make_CmAddWinProfileItem
  inherits = cm_add_object

  duplicate {
    type = boolean
    default = y
  }
  key {
    type = string
  }
  value {
    type = string
  }
}

## remove_win_profile_objects

remove_win_profile_objects {
  builder = make_CmRemoveWinProfileObjectsContainer
  context = package,generic_container
  inherits = cm_command,cm_composite_command,cm_remove_object

  file {
    type = pathname
    mandatory = y
  }
}

## remove_section

remove_section {
  context = remove_win_profile_objects
  builder = make_CmRemoveWinProfileObjectsContainer
  inherits = cm_command,cm_remove_object,cm_composite_command

  remove {
    type = boolean
    default = y
  }
  name {
    type = string
    mandatory = y
  }
}

## remove_item

remove_item {
  context = remove_section
  builder = make_CmRemoveWinProfileItem
  inherits = cm_remove_object

  key {
    type = string
  }
  value {
    type = string
  }
}

##-----------------------------------------------------
#
# Windows Shell Objects
#
#------------------------------------------------------

## add_win_shell_folder

add_win_shell_folder {
  builder = make_CmAddWinShellObjectsContainer
  context = package,generic_container,add_win_shell_folder
  inherits = cm_command,cm_composite_command,cm_add_object

  location {
    type = pathname
  }
  display_name {
    type = string
  }
  add {
    type = boolean
    default = y
  }
}

## remove_win_shell_folder

remove_win_shell_folder {
  builder = make_CmRemoveWinShellObjectsContainer
  context = package,generic_container,remove_win_shell_folder
  inherits = cm_command,cm_composite_command

  location {
    type = pathname
  }
  display_name {
    type = string
  }
  remove {
    type = boolean
    default = y
  }
}

## add_link

add_link {
  builder = make_CmAddWinShellLink
  context = add_win_shell_folder
  inherits = cm_command,cm_add_object

  arguments {
    type = string
  }
  command {
    type = pathname
    mandatory = y
  }
  display_name {
    type = string
  }
  hotkey {
    type = numeric
  }
  icon_index {
    type = numeric
    default = 0
  }
  icon_location {
    type = pathname
  }
  show {
    type = single_choice
    choice = normal:0,minimized:1,maximized:2
    default = 0
  }
  working_dir {
    type = pathname
  }
}

## remove_link

remove_link {
  builder = make_CmRemoveWinShellLink
  context = remove_win_shell_folder
  inherits = cm_command

  display_name {
    type = string
    mandatory = y
  }
}

##-----------------------------------------------------
#
# Windows Registry Objects
#
#------------------------------------------------------

## win_registry_object

win_registry_object {
  override_permissions {
    type = boolean
    default = n
  }
}

## add_win_registry_key

add_win_registry_key {
  builder = make_CmAddWinRegistryObjectsContainer
  context = package,generic_container,add_win_registry_key
  inherits = cm_command,cm_composite_command,cm_add_object,win_registry_object,generic_container

  parent_key {
    type = string
    mandatory = y
  }
  key {
    type = string

  }
  class {
    type = string
  }
  add {
    type = boolean
    default = y
  }
}

## remove_win_registry_key

remove_win_registry_key {
  builder = make_CmRemoveWinRegistryObjectsContainer
  context = package,generic_container,remove_win_registry_key
  inherits = cm_command,cm_composite_command,cm_remove_object,win_registry_object,generic_container

  parent_key {
    type = string
    mandatory = y
  }
  key {
    type = string
  }
  remove {
    type = boolean
    default = y
  }
}

## add_value

add_value {
  builder = make_CmAddWinRegistryValue
  context = add_win_registry_key
  inherits = cm_add_object,win_registry_object

  name {
    type = string
  }
  type {
    type = single_choice
    choice = string:0,expand_string:1,binary:2,dword:3,multi_string:4
    default = 0
  }
  position {
    type = single_choice
    choice = begin:0,end:1,replace:2
    default = 2
  }
  data {
    type = string
  }
}

## remove_value

remove_value {
  builder = make_CmRemoveWinRegistryValue
  context = remove_win_registry_key
  inherits = cm_remove_object,win_registry_object

  name {
    type = string
  }
  type {
    type = single_choice
    choice = string:0,expand_string:1,binary:2,dword:3,multi_string:4
    default = 0
  }
}

##-----------------------------------------------------
#
# Windows NT Services Objects
#
#------------------------------------------------------

## add_win_nt_service

add_win_nt_service {
  builder = make_CmAddWinNTService
  context = package,generic_container
  inherits = cm_command,cm_add_object


  add {
    type = boolean
    default = y
  }
  name {
    type = string
    mandatory = y
  }
  display_name {
    type = string
  }
  path {
    type = pathname
    mandatory = y
  }
  type {
    type = single_choice
    choice = win32_own_process:0,win32_share_process:1,kernel_driver:2,file_system_driver:3
    default = 0
  }
  interact_with_desktop {
    type = boolean
    default = n
  }
  start_type {
    type = single_choice
    choice = boot:0,system:1,auto:2,demand:3,disabled:4
    default = 3
  }
  error_control {
    type = single_choice
    choice = ignore:0,normal:1,severe:2,critical:3
    default = 1
  }
  load_ordering_group {
    type = string
  }
  dependency_groups {
    type = string
  }
  dependency_services {
    type = string
  }
  account {
    type = string
  }
  password {
    type = string
  }
}

## remove_win_nt_service

remove_win_nt_service {
  builder = make_CmRemoveWinNTService
  context = package,generic_container
  inherits = cm_command

  name {
    type = string
    mandatory = y
  }
  remove {
    type = boolean
    default = y
  }
}

##-----------------------------------------------------
#
# OS/2 Profile Objects
#
#------------------------------------------------------

## add_os2_profile_objects

add_os2_profile_objects {
  builder = make_CmAddOS2ProfileObjectsContainer
  context = package,generic_container
  inherits = cm_command,cm_composite_command,cm_add_object

  file {
    type = pathname
    mandatory = y
  }
}

## add_item

add_item {
  context = add_os2_profile_objects
  builder = make_CmAddOS2ProfileItem
  inherits = cm_add_object

  position {
    type = single_choice
    choice = replace:2,begin:0,end:1
    default = 2
  }
  type {
    type = single_choice
    choice = string:1,binary:0
    default = 1
  }
  section {
    type = string
    mandatory = y
  }
  key {
    type = string
    mandatory = y
  }
  value {
    type = string
  }
}

## remove_os2_profile_objects

remove_os2_profile_objects {
  builder = make_CmRemoveOS2ProfileObjectsContainer
  context = package,generic_container
  inherits = cm_command,cm_composite_command,cm_remove_object

  file {
    type = pathname
    mandatory = y
  }
}

## remove_item

remove_item {
  context = remove_os2_profile_objects
  builder = make_CmRemoveOS2ProfileItem
  inherits = cm_remove_object

  position {
    type = single_choice
    choice = replace:2,begin:0,end:1
    default = 2
  }
  type {
    type = single_choice
    choice = string:1,binary:0
    default = 1
  }
  section {
    type = string
    mandatory = y
  }
  key {
    type = string
    mandatory = y
  }
  value {
    type = string
  }
}


##-----------------------------------------------------
#
# OS/2 Desktop Objects
#
#------------------------------------------------------

## add_os2_desktop_folder

add_os2_desktop_folder {
  builder = make_CmAddOS2DesktopObjectsContainer
  context = package,generic_container,add_os2_desktop_folder
  inherits = cm_command,cm_composite_command,cm_add_object,generic_container,os2_desktop_folder

  location {
    type = string
    mandatory = y
  }
  title {
    type = string
  }
  object_id {
    type = string
  }
  icon_location {
    type = pathname
  }
  icon_index {
    type = numeric
    default = -1
  }
  template {
    type = boolean
    default = n
  }
  background_image_file {
    type = pathname
  }
  background_image_mode {
    type = single_choice
    # the choices are the ASCII codes
    # for 'N', 'T' and 'S'
    choice = normal:78,tiled:84,scaled:83
    default = 78
  }
  background_color {
    type = string
  }
  scaling_factor {
    type = numeric
  }
  animation_icon_location {
    type = pathname
  }
  animation_icon_index {
    type = numeric
    default = 0
  }
  default_view {
    type = single_choice
    choice = icon:0,tree:1,details:2
    default = 0
  }
  add {
    type = boolean
    default = y
  }
}

## add_program
add_program {
  context = add_os2_desktop_folder
  builder = make_CmAddOS2DesktopProgram
  inherits = cm_add_object

  title {
    type = string
  }
  object_id {
    type = string
  }
  icon_location {
    type = pathname
  }
  icon_index {
    type = numeric
    default = -1
  }
  template {
    type = boolean
    default = n
  }
  command {
    type = pathname
    mandatory = y
  }
  arguments {
    type = string
  }
  type {
    type = single_choice
    choice = fullscreen:0,pm:1,standard_compatibility_fullscreen:2,enhanced_compatibility_fullscreen:3,winos2_enhanced_common_session:4,winos2_enhanced_separate_session:5,standard_compatibility_fullscreen31:6,winos2_standard_common_session:7,winos2_standard_separate_session:8,winos2_separate_vdm:9,dos_fullscreen:10,winos2_fullscreen:11,os2_window:12,dos_window:13,winos2_window:14
    default = 12
  }
  working_dir {
    type = pathname
  }
}


## add_shadow

add_shadow {
  context = add_os2_desktop_folder
  builder = make_CmAddOS2DesktopShadow
  inherits = cm_add_object

  object_id {
    type = string
  }
  shadowed_object_id {
    type = string
  }
  shadowed_object_location {
    type = string
  }
  shadowed_object_title {
    type = string
  }
}

## add_object

add_object {
  context = add_os2_desktop_folder
  builder = make_CmAddOS2DesktopObject
  inherits = cm_add_object

  class {
    type = string
    mandatory = y
  }
  title {
    type = string
  }
  object_id {
    type = string
  }
  icon_location {
    type = pathname
  }
  icon_index {
    type = numeric
    default = -1
  }
  template {
    type = boolean
    default = n
  }
  setup_string {
    type = string
  }
}

## remove_os2_desktop_folder

remove_os2_desktop_folder {
  builder = make_CmRemoveOS2DesktopObjectsContainer
  context = package,generic_container,remove_os2_desktop_folder
  inherits = cm_command,cm_composite_command,cm_remove_object,generic_container,os2_desktop_folder

  remove {
    type = boolean
    default = y
  }
  location {
    type = string
    mandatory = y
  }
    title {
    type = string
  }
  object_id {
    type = string
  }
}

## remove_program

remove_program {
  context = remove_os2_desktop_folder
  builder = make_CmRemoveOS2DesktopProgram
  inherits = cm_remove_object

  title {
    type = string
  }
  object_id {
    type = string
  }
}

## remove_shadow

remove_shadow {
  context = remove_os2_desktop_folder
  builder = make_CmRemoveOS2DesktopShadow
  inherits = cm_remove_object

  object_id {
    type = string
  }
  shadowed_object_id {
    type = string
  }
  shadowed_object_location {
    type = string
  }
  shadowed_object_title {
    type = string
  }
}

## remove_object

remove_object {
  context = remove_os2_desktop_folder
  builder = make_CmRemoveOS2DesktopObject
  inherits = cm_remove_object

  title {
    type = string
  }
  object_id {
    type = string
  }
}


##-----------------------------------------------------
#
# Text File Objects
#
#------------------------------------------------------

## add_text_file_objects

add_text_file_objects {
  builder = make_CmAddTextFileObjectsContainer
  context = package,generic_container
  inherits = cm_command,cm_composite_command,cm_add_object

  file {
    type = pathname
    mandatory = y
  }
  name {
    type = string
  }
}

## remove_text_file_objects

remove_text_file_objects {
  builder = make_CmRemoveTextFileObjectsContainer
  context = package,generic_container
  inherits = cm_command,cm_composite_command

  file {
    type = pathname
    mandatory = y
  }
}

## add_line

add_line {
  context = add_text_file_objects
  builder = make_CmAddTextFileLine
  inherits = cm_add_object

  pattern {
    type = string
  }
  position {
    type = single_choice
    choice = end:0,begin:1,before_first:2,before_last:3,after_first:4,after_last:5
    default = 0
  }
  text {
    type = string
    mandatory = y
  }
}

## remove_line

remove_line {
  context = remove_text_file_objects
  builder = make_CmRemoveTextFileLine
  inherits = cm_remove_object

  pattern {
    type = string
  }
  text {
    type = string
    mandatory = y
  }
}

## add_command_line

add_command_line {
  context = add_text_file_objects
  builder = make_CmAddTextFileCommandLine
  inherits = cm_add_object

  command {
    type = string
    mandatory = y
  }
  key {
    type = string
    mandatory = y
  }
  pattern {
    type = string
  }
  position {
    type = single_choice
    choice = end:0,begin:1,before_first:2,before_last:3,after_first:4,after_last:5
    default = 0
  }
  text {
    type = string
    mandatory = y
  }
}

## remove_command_line

remove_command_line {
  context = remove_text_file_objects
  builder = make_CmRemoveTextFileCommandLine
  inherits = cm_remove_object

  command {
    type = string
    mandatory = y
  }
  key {
    type = string
    mandatory = y
  }
  pattern {
    type = string
  }
  text {
    type = string
    mandatory = y
  }
}

## add_token

add_token {
  context = add_text_file_objects
  builder = make_CmAddTextFileToken
  inherits = cm_add_object

  key {
    type = string
    mandatory = y
  }
  position {
    type = single_choice
    choice = begin:1,end:0
    default = 0
  }
  token_separator {
    type = string
    default = ";"
  }
  text {
    type = string
    mandatory = y
  }
}

## remove_token

remove_token {
  context = remove_text_file_objects
  builder = make_CmRemoveTextFileToken
  inherits = cm_remove_object

  key {
    type = string
    mandatory = y
  }
  token_separator {
    type = string
    default = ";"
  }
  text {
    type = string
    mandatory = y
  }
}

##-----------------------------------------------------
#
# OS/400 Objects
#
#------------------------------------------------------

#
os400_object {
  location {
    type = pathname
  }
  name {
    type = pathname
  }
  destination {
    type = pathname
  }
  target_release {
    type = string
  }
  replace_option {
    type = single_choice
    choice = *ALL:1,*NEW:2,*OLD:4
    default = 1
  }
  remote {
    type = boolean
    default = n
  }
}

#
add_os400_lib {
  builder = make_CmAddOs400ObjectsContainer
  context = package,generic_container
  inherits = cm_composite_command,cm_add_object,generic_container,os400_object

  add {
    type = boolean
    default = y
  }
  descend {
    type = boolean
    default = n
  }
  changed_obj_only {
    type = boolean
    default = n
  }
  reference_date {
    type = string
  }
  reference_time {
    type = string
  }
}

#
remove_os400_lib {
  builder = make_CmRemoveOs400ObjectsContainer
  context = package,generic_container
  inherits = cm_composite_command,cm_remove_object,generic_container,os400_object

  remove {
    type = boolean
    default = y
  }
  descend {
    type = boolean
    default = n
  }
}

#
add_os400_obj {
  builder = make_CmAddOs400Obj
  context = add_os400_lib
  inherits = cm_add_object,os400_object
}

#
remove_os400_obj {
  builder = make_CmRemoveOs400Obj
  context = remove_os400_lib
  inherits = cm_remove_object,os400_object
}

#
add_os400_licpgm {
  builder = make_CmAddOs400LicPgm
  context = package,generic_container
  inherits = cm_command,cm_add_object,os400_object

  add {
    type = boolean
    default = y
  }
  licpgm_ID {
    type = string
    mandatory =y
  }
  licpgm_option {
    type = string
  }
  release {
    type = string
  }
  restore_object {
    type = single_choice
    choice = *ALL:1,*PGM:2,*LNG:4
    default = 1
  }
  device {
    type = pathname
  }
  source {
    type = pathname
  }
  language {
    type = string
  }
}

#
remove_os400_licpgm {
  builder = make_CmRemoveOs400LicPgm
  context = package,generic_container
  inherits = cm_command,cm_remove_object,os400_object

  remove {
    type = boolean
    default = y
  }
  licpgm_ID {
    type = string
    mandatory = y
  }
  licpgm_option {
    type = string
  }
  language {
    type = string
  }
  release {
    type = string
  }
}

#
os400_sysval {
  builder = make_CmChangeOs400Sysval
  context = package,generic_container
  inherits = cm_command

  sysval_name {
    type = string
  }
  value {
    type = string
  }
}




#############################################################
##
## ACTIONS
##
#############################################################


##-----------------------------------------------------
#
# Restart
#
#------------------------------------------------------

#
restart {
  inherits = cm_command
  context = package,generic_container
  builder = make_CmRestart

  during_install {
    type = single_choice
    choice = none:0,after:1,immediately:2
    default = 1
  }
  during_remove {
    type = single_choice
    choice = none:0,after:1,immediately:2
    default = 1
  }
  during_undo {
    type = single_choice
    choice = none:0,after:1,immediately:2
    default = 1
  }

  during_commit {
    type = single_choice
    choice = none:0,after:1,immediately:2
    default = 1
  }

  timeout {
    type = numeric
    default = -1
  }

  force_restart {
    type = boolean
    default = n
  }

}

##-----------------------------------------------------
#
# Logoff
#
#------------------------------------------------------

#
logoff {
  inherits = cm_command
  context = package,generic_container
  builder = make_CmLogoff

  force {
    type = boolean
    default = n
  }

  force_if_locked {
    type = boolean
    default = n
  }

  during_install {
    type = boolean
    default = n
  }
  during_remove {
    type = boolean
    default = n
  }
  during_undo {
    type = boolean
    default = n
  }

  during_commit {
    type = boolean
    default = n
  }

}

##-----------------------------------------------------
#
# Execute User Program
#
#------------------------------------------------------

## exit_codes
exit_codes {
  success {
    type = range
    range = 0,65535
	default = 0,0
  }
  success_reboot_now {
    type = range
    range = 0,65535
  }
  success_reboot_now_reexecute {
    type = range
    range = 0,65535
  }
  success_reboot_after {
    type = range
    range = 0,65535
  }
  success_reboot_after_reexecute {
    type = range
    range = 0,65535
  }
  success_in_a_reboot {
    type = range
    range = 0,65535
  }
  warning {
    type = range
    range = 0,65535
  }
  failure {
    type = range
    range = 0,65535
  }
  fatal_failure {
    type = range
    range = 0,65535
  }
}



## user_program
user_program {

  #
  # program class attributes
  ##
  path {
    type = pathname
    mandatory = y
  }
  input_file {
    type = pathname
  }
  arguments {
    type = string
  }
  inhibit_parsing {
    type = boolean
    default = n
  }
  working_dir {
    type = pathname
  }
  timeout {
    type = numeric
    default = -1
  }
  unix_user_id {
    type = numeric
    default = 0
  }
  unix_group_id {
    type = numeric
    default = 0
  }
  user_name {
    type = string
  }
  group_name {
    type = string
  }
  user_input_required {
    type = boolean
    default = n
  }
  environment {
    type = string
  }

  #
  # specific user_program attributes
  ##

  exit_codes {
    type = object
    object_builder = make_RangeValueList
  }
  bootable {
    type = boolean
    default = n
  }
  error_file {
    type = pathname
  }
  max_stderr_size {
    type = numeric
    default = 10000
  }
  max_stdout_size {
    type = numeric
    default = 10000
  }
  output_file {
    type = pathname
  }
  output_file_append {
    type = boolean
    default = n
  }
  error_file_append {
    type = boolean
    default = n
  }
  reporting_stdout_on_server {
    type = boolean
    default = n
  }
  reporting_stderr_on_server {
    type=boolean
    default = n
  }
  retry {
    type = numeric
    default = 0
  }
  corequisite_files {
    type = object
    object_builder = make_CmAddFSObjectsContainer
  }
}

## corequisite_files
corequisite_files {
  inherits = cm_add_object,add_file,add_directory
}
## during_install
during_install {
  inherits = user_program,mssetup_program,installshield_program,cid_program
}
## during_remove
during_remove {
  inherits = user_program,mssetup_program,cid_program
}
## during_verify
during_verify {
  inherits = user_program,cid_program
}
## during_undo
during_undo {
  inherits = user_program,cid_program
}
## during_cleanup
during_cleanup {
  inherits = user_program,cid_program
}
## during_backup
during_backup {
  inherits = user_program,cid_program
}
## during_accept
during_accept {
  inherits = user_program,cid_program
}
## during_commit
during_commit {
  inherits = user_program,cid_program
}
## execute_user_program
execute_user_program {
  builder = make_CmExecuteUserProgram
  context = package,generic_container
  inherits = cm_command

  name {
    type = string
  }
  transactional {
    type = boolean
    default = n
  }
  during_install {
    type = object
    object_builder = make_CmUserProgram
  }
  during_remove {
    type = object
    object_builder = make_CmUserProgram
  }
  during_verify {
    type = object
    object_builder = make_CmUserProgram
  }
  during_undo {
    type = object
    object_builder = make_CmUserProgram
  }
  during_cleanup {
    type = object
    object_builder = make_CmUserProgram
  }
  during_backup {
    type = object
    object_builder = make_CmUserProgram
  }
  during_accept {
    type = object
    object_builder = make_CmUserProgram
  }
  during_commit {
    type = object
    object_builder = make_CmUserProgram
  }
}
##-----------------------------------------------------
#
# Execute CID Program
#
#------------------------------------------------------

#
execute_cid_program {
  builder = make_CmExecuteCIDProgram
  context = package,generic_container
  inherits = cm_command,execute_program

  name {
    type = string
  }
  transactional {
    type = boolean
    default = n
  }
  during_install {
    type = object
    object_builder = make_CmCIDProgram
  }
  during_remove {
    type = object
    object_builder = make_CmCIDProgram
  }
  during_verify {
    type = object
    object_builder = make_CmCIDProgram
  }
  during_undo {
    type = object
    object_builder = make_CmCIDProgram
  }
  during_cleanup {
    type = object
    object_builder = make_CmCIDProgram
  }
  during_backup {
    type = object
    object_builder = make_CmCIDProgram
  }
  during_accept {
    type = object
    object_builder = make_CmCIDProgram
  }
  during_commit {
    type = object
    object_builder = make_CmCIDProgram
  }
  maintenance_programs {
    type = object
    object_builder = make_CidProgramList
  }
}

#
maintenance_programs {
  cid_program {
    type = object
    object_builder = make_CmCIDProgram
  }
}
#
cid_program {
  inherits = user_program

  reboot {
    type = boolean
    default = n
  }

  failure_as_fatal {
    type = boolean
    default = n
  }
}

##-----------------------------------------------------
#
# Execute MS-Setup Program
#
#------------------------------------------------------

#
mssetup_program {
  inherits = user_program
}

#
execute_mssetup_program {
  builder = make_CmExecuteMSSetupProgram
  context = package,generic_container
  inherits = cm_command,execute_user_program

  name {
    type = string
  }
  during_install {
    type = object
    object_builder = make_CmMSSetupProgram
  }
  during_remove {
    type = object
    object_builder = make_CmMSSetupProgram
  }
}


##-----------------------------------------------------
#
# Execute InstallShield Program
#
#------------------------------------------------------

#
installshield_program {
  inherits = user_program

  log_file_path {
    type = pathname
    default = "instshld.log"
  }
  response_file_path {
    type = pathname
    default = "setup.iss"
  }
  uninstall_response_file_path {
    type = pathname
    default = "remsetup.iss"
  }
  silent {
    type = boolean
    default = y
  }
}


#
execute_installshield_program {
  builder = make_CmExecuteInstallShieldProgram
  context = package,generic_container
  inherits = cm_command,execute_user_program

  automatic_uninstall {
    type = boolean
    default = y
  }
  name {
    type = string
  }
  during_install {
    type = object
    object_builder = make_CmInstallShieldProgram
  }
}

##-----------------------------------------------------
#
# Install Native Package
#
#------------------------------------------------------
#
install_native_package {
  context = package,generic_container
  inherits = cm_command

  image_dir {
    type = pathname
    mandatory = y
  }
  source_dir {
    type = pathname
  }
  is_image_remote {
    type = boolean
    default = n
  }
  keep_images {
    type = boolean
    default = n
  }
  compression_method {
    type = single_choice
    choice = deflated:8,stored:0
    default = 0
  }
}

##-----------------------------------------------------
#
# Install AIX package
#
#------------------------------------------------------
#
install_aix_package {
  builder = make_InstallAIXPackage
  context = package,generic_container
  inherits = install_native_package

  package_file {
    type = string
  }
  log_mode {
    type = single_choice
    choice = disabled:1,default:2,low:4,medium:8,high:16
    default = 1
  }
  log_path {
    type = pathname
  }
  report_log {
    type = boolean
    default = n
  }
  block_size{
    type = numeric
    default = 512
  }
  override_files {
    type = boolean
    default = n
  }
  install_corequisites {
    type = boolean
    default = n
  }
  is_update {
    type = boolean
    default = n
  }
  install_root {
    type = boolean
    default = n
  }
  install_share {
    type = boolean
    default = n
  }
  install_usr {
    type = boolean
    default = n
  }
  cdrom_volume {
    type = boolean
    default = n
  }
  expand_fs {
    type = boolean
    default = n
  }
  save_directory {
    type = pathname
  }
  fileset {
    type = object
    object_builder = make_FileSet
  }
}

#
fileset {
  name {
    type = string
    mandatory = y
  }
  level {
    type = string
  }
  description {
    type = string
  }
}


##-----------------------------------------------------
#
# Install solaris package
#
#------------------------------------------------------
#
install_solaris_package {
  builder = make_InstallSolarisPackage
  context = package,generic_container
  inherits = install_native_package

  package_file {
    type = pathname
  }
  administration_file {
    type = pathname
  }
  spool_directory {
    type = pathname
  }
  client_root_path {
    type = pathname
  }
  use_root_path {
    type = boolean
    default =n
  }
  interactive {
    type = boolean
    default =n
  }
  response_file {
    type = pathname
  }
  remove_absolutely {
    type = boolean
    default =n
  }

  report_output_to_server {
    type = boolean
    default =n
  }

  fs_file {
    type = pathname
  }
  package_instance {
    type = object
    object_builder = make_PackageInstance
  }
}

#
package_instance {
  name {
    type = string
    mandatory = y
  }
  description {
    type = string
  }
  platform {
    type = string
  }
  version {
    type = string
  }
  revision {
    type = string
  }
}

##-----------------------------------------------------
#
# Install solaris patch
#
#------------------------------------------------------
#
install_solaris_patch {
  builder = make_InstallSolarisPatch
  context = package,generic_container
  inherits = install_native_package

  install_unconditionally {
    type = boolean
    default = n
  }
  client_root_path {
    type = pathname
  }
  backout_directory {
    type = pathname
  }
  service {
    type = string
  }
  patch_id {
    type = string
    mandatory = y
  }
  net_install_image {
    type = pathname
  }
  force {
    type = boolean
    default = n
  }

  report_output_to_server {
    type = boolean
    default = n
  }

}


##-----------------------------------------------------
#
# Install MSI product/patch
#
#------------------------------------------------------

#
install_msi_product {
  builder = make_InstallMSIProduct
  context = package,generic_container
  inherits = install_native_package

  package_file {
    type = string
    mandatory = y
  }
  destination_folder {
    type = pathname
  }
  reinstall_mode {
    type = multi_choice
    choice = file_missing:2,file_older_version:4,file_equal_version:8,file_exact:16,file_verify:32,file_replace:64,user_data:128,machine_data:256,shortcut:512,package:1024
    default = 904
  }
  log_mode {
    type = multi_choice
    choice = disabled:1,fatal_exit:2,error:4,warning:8,user:16,info:32,resolve_source:64,out_of_disk_space:128,action_start:256,action_data:512,common_data:1024,property_dump:2048,verbose:4096
    default = 6
  }
  log_path {
    type = pathname
  }
  report_log {
    type = boolean
    default = n
  }
  ui_level {
    type = single_choice
    choice = full:0,reduced:1,basic:2,default:3,none:4,end_dialog:5,progress_only:6
    default = 4
  }
  properties {
    type = string
  }
  product_code {
    type = string
  }
  product_name {
    type = string
  }
  product_version {
    type = string
  }
  feature {
    type = object
    object_builder = make_MSIFeature
  }
  all_users {
    type = boolean
    default = y
  }
}
#
install_msi_patch {
  builder = make_InstallMSIPatch
  context = package,generic_container
  inherits = install_native_package

  package_file {
    type = string
    mandatory = y
  }
  reinstall_mode {
    type = multi_choice
    choice = file_missing:2,file_older_version:4,file_equal_version:8,file_exact:16,file_verify:32,file_replace:64,user_data:128,machine_data:256,shortcut:512
    default = 904
  }
  log_mode {
    type = multi_choice
    choice = disabled:1,fatal_exit:2,error:4,warning:8,user:16,info:32,resolve_source:64,out_of_disk_space:128,action_start:256,action_data:512,common_data:1024,property_dump:2048,verbose:4096
    default = 6
  }
  log_path {
    type = pathname
  }
  report_log {
    type = boolean
    default = n
  }
  ui_level {
    type = single_choice
    choice = full:0,reduced:1,basic:2,default:3,none:4,end_dialog:5,progress_only:6
    default = 4
  }
  properties {
    type = string
  }
}

#
feature {
  name {
    type = string
    mandatory = y
  }
  action {
    type = single_choice
    choice = default_action:0,install_local:1,install_when_required:2,install_when_source:3,remove:4
    mandatory = y
  }
  title {
    type = string
  }
  parent {
    type = string
  }

}

##-----------------------------------------------------
#
# Install rpm package
#
#------------------------------------------------------
#
install_rpm_package {
	builder = make_InstallRpmPackage
	context = package,generic_container
# 	inherits = install_native_package
 	inherits = cm_command

	package_file {
	  type = pathname
	}

	rpm_options {
	  type = string
	}
	rpm_install_type {
	  type = string
	}
 	rpm_install_options {
	  type = string
	}
    rpm_install_force {
	  type = boolean
	}
	rpm_install_nodeps {
	  type = boolean
	}
	rpm_verify_options {
	  type = string
	}
	rpm_remove_options {
	  type = string
	}
    rpm_remove_nodeps {
	  type = boolean
	}

	rpm_report_log {
		type = boolean
		default =n
	}

	rpm_file  {
	  type = object
 	  object_builder = make_RpmFile
    }

}
#
rpm_file {
#	builder = make_RpmFile
	context = package,generic_container
	inherits = install_native_package
	rpm_package_name {
	  type = string
	}
	rpm_package_file {
	  type = string
	}

}

##-----------------------------------------------------
#
# Install HP package
#
#------------------------------------------------------
#
install_hp_package {
  builder = make_InstallHPPackage
  context = package,generic_container
  inherits = install_native_package

  package_file {
    type = string
  }
  log_mode {
    type = single_choice
    choice = none:1,low:2,medium:4,high:8,very_high:16
    default = 1
  }
  log_path {
    type = pathname
  }
  report_log {
    type = boolean
    default = n
  }
  gui_interaction {
    type = boolean
    default = n
  }
  gui_options {
    type = string
    default = "bg=black, fg=green, name=ITCM4.2.1"
  }
  response_files_catalog {
    type = pathname
  }
  input_session_file {
    type = pathname
  }
  output_session_file {
    type = pathname
  }
  options {
    type = string
  }
  options_file {
    type = pathname
  }
  is_patch {
    type = boolean
    default = n
  }
  software_file {
    type = pathname
  }
  software_selection {
    type = object
    object_builder = make_SoftwareSelection
  }
}

#
software_selection {
  name {
    type = string
    mandatory = y
  }
  revision {
    type = string
  }
  description {
    type = string
  }
}

##-----------------------------------------------------
#
# Check Disk Space
#
#------------------------------------------------------

#
check_disk_space {
  builder = make_CmCheckDiskSpace
  context = package,generic_container
  inherits = cm_command

  volume {
    type = string
  }
}


##-----------------------------------------------------
#
# Device Actions
#
#------------------------------------------------------

device_objects {
  builder = make_CmAddDeviceObjectsContainer
  context = package,generic_container
  inherits = cm_command

  name {
    type = string
  }
  version {
    type = string
  }
  device_type {
    type = string
  }
  version_check {
    type = boolean
    default = y
  }
  stop_on_failure {
    type = boolean
    default = y
  }
}

add_device_directory {
  builder = make_CmAddDeviceFSObjectsContainer
  context = device_objects,add_device_directory
  inherits = add_directory

  name {
    type = string
  }
  location {
    type = pathname
  }
  destination {
    type = pathname
  }
  descend_dirs {
    type = boolean
    default = n
  }
}

add_device_file {
  builder = make_CmAddDeviceFile
  context = device_objects,add_device_directory
  inherits = add_file

  name {
    type = string
  }
  destination {
    type = pathname
  }
  need_space {
    type = string
    default = 0
  }
}


device_execute_palm_program {
  builder = make_CmDeviceExecutePalmProgram
  context = device_objects
  inherits = add_device_file

  type {
    type = single_choice
    choice = Application:1,Database:2
    default = 1
  }
  launch_code {
    type = numeric
    default = 0
  }

}



device_execute_program {
  builder = make_CmDeviceExecuteProgram
  context = device_objects
  inherits = cm_command

  path {
    type = pathname
  }
  arguments {
    type = string
  }
  need_space {
    type = string
    default = 0
  }

}

device_configuration_settings {
  builder = make_CmDeviceConfigurationSettings
  context = device_objects
  inherits = cm_composite_command
}

device_item {
  builder = make_CmDeviceItem
  context = device_configuration_settings
  inherits = cm_command

  key {
    type = string
  }
  value {
    type = string
  }
}

device_action {
  builder = make_CmDeviceAction
  context = package,generic_container
  inherits = cm_command

  device_type {
    type = single_choice

    #
    # The available choices MUST be sequential numbers (1,2,3,4.....)
    # instead of 2-powers like all the other single_choice values defined into
    # this rules.spr file.
    # This because the allowed device types could be more than 32
    # (there are just 32 possible values using the 2-powers
    #
    choice = Nokia9500:1,Nokia9300:2
    mandatory = y
    default = 1
  }
  action_type {
    type = single_choice
    choice = application_distribution:1,base_configuration:2,device_configuration:3,device_provisioning:4,notification:8
    mandatory = y
    default = 1
  }
  action_parameter {
    type = object
    object_builder = make_DeviceActionParameter
  }
}

action_parameter {
  key {
    type = single_choice
    choice = SourceFilePath:1,SendNotification:2
    mandatory = y
    default = 1
  }
  value {
    type = string
    mandatory = y
  }
}

